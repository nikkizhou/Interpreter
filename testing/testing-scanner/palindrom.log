   1: 
   2: # A palindrome is a word that reads the same
   3: # forwards and backwards, like OBO and RACECAR.
   4: 
   5: def is_a_palindrome (word):
Scanner: def token on line 5
Scanner: name token on line 5: is_a_palindrome
Scanner: ( token on line 5
Scanner: name token on line 5: word
Scanner: ) token on line 5
Scanner: : token on line 5
Scanner: NEWLINE token on line 5
   6:    i1 = 0;  i2 = len(word)-1
Scanner: INDENT token on line 6
Scanner: name token on line 6: i1
Scanner: = token on line 6
Scanner: integer literal token on line 6: 0
Scanner: ; token on line 6
Scanner: name token on line 6: i2
Scanner: = token on line 6
Scanner: name token on line 6: len
Scanner: ( token on line 6
Scanner: name token on line 6: word
Scanner: ) token on line 6
Scanner: - token on line 6
Scanner: integer literal token on line 6: 1
Scanner: NEWLINE token on line 6
   7:    while i1 < i2:
Scanner: while token on line 7
Scanner: name token on line 7: i1
Scanner: < token on line 7
Scanner: name token on line 7: i2
Scanner: : token on line 7
Scanner: NEWLINE token on line 7
   8:       if word[i1] != word[i2]: return False
Scanner: INDENT token on line 8
Scanner: if token on line 8
Scanner: name token on line 8: word
Scanner: [ token on line 8
Scanner: name token on line 8: i1
Scanner: ] token on line 8
Scanner: name token on line 8: word
Scanner: [ token on line 8
Scanner: name token on line 8: i2
Scanner: ] token on line 8
Scanner: : token on line 8
Scanner: return token on line 8
Scanner: False token on line 8
Scanner: NEWLINE token on line 8
   9:       i1 = i1 + 1;  i2 = i2 - 1
Scanner: name token on line 9: i1
Scanner: = token on line 9
Scanner: name token on line 9: i1
Scanner: + token on line 9
Scanner: integer literal token on line 9: 1
Scanner: ; token on line 9
Scanner: name token on line 9: i2
Scanner: = token on line 9
Scanner: name token on line 9: i2
Scanner: - token on line 9
Scanner: integer literal token on line 9: 1
Scanner: NEWLINE token on line 9
  10:    return True
Scanner: DEDENT token on line 10
Scanner: return token on line 10
Scanner: True token on line 10
Scanner: NEWLINE token on line 10
  11: 
  12: query = input("A word: ")
Scanner: DEDENT token on line 12
Scanner: name token on line 12: query
Scanner: = token on line 12
Scanner: name token on line 12: input
Scanner: ( token on line 12
Scanner: string literal token on line 12: "A word: "
Scanner: ) token on line 12
Scanner: NEWLINE token on line 12
  13: print('"'+query+'":', is_a_palindrome(query))
Scanner: name token on line 13: print
Scanner: ( token on line 13
Scanner: string literal token on line 13: '"'
Scanner: + token on line 13
Scanner: name token on line 13: query
Scanner: + token on line 13
Scanner: string literal token on line 13: '":'
Scanner: , token on line 13
Scanner: name token on line 13: is_a_palindrome
Scanner: ( token on line 13
Scanner: name token on line 13: query
Scanner: ) token on line 13
Scanner: ) token on line 13
Scanner: NEWLINE token on line 13
Scanner: E-o-f token
